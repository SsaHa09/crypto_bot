import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from analysis import get_top_3_potential_coins
from tracking import start_tracking
from bot_functions import send_top_3_potential_coins
import os

# üîê –¢–≤—ñ–π Telegram-—Ç–æ–∫–µ–Ω
TOKEN = '7932744530:AAEXr5U2CYDGw-7Xk_Td-qGsnrR5n987Sog'

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç üíπ\n–ù–∞–¥—ñ—à–ª–∏ /top, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø-3 –º–æ–Ω–µ—Ç–∏.")

# üìä –ö–æ–º–∞–Ω–¥–∞ /top (–∞–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç)
async def send_top_3(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None):
    top_coins = get_top_3_potential_coins()
    keyboard = [[InlineKeyboardButton(coin, callback_data=coin)] for coin in top_coins]
    reply_markup = InlineKeyboardMarkup(keyboard)

    chat_id = update.effective_chat.id if update else context._chat_id
    await context.bot.send_message(chat_id=chat_id, text="‚¨ÜÔ∏è –¢–æ–ø-3 –º–æ–Ω–µ—Ç–∏ –∑ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª–æ–º —Ä–æ—Å—Ç—É:", reply_markup=reply_markup)

# üëÜ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–Ω–µ—Ç–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_coin = query.data

    # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä
    with open("state.json", "w") as f:
        json.dump({"coin": selected_coin}, f)

    await query.edit_message_text(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: {selected_coin}\n–Ø –ø–æ—á–∏–Ω–∞—é —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Ü—ñ—î—é –º–æ–Ω–µ—Ç–æ—é üìà")
    await start_tracking(context, selected_coin)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("top", send_top_3))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == '__main__':
    main()